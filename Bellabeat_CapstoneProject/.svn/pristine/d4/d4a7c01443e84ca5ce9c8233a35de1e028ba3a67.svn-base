---
title: "Bellabeat"
author: "Marcos Javier García Barrios"
date: "2023-02-07"
output: 
  bookdown::html_document2:
    number_sections: true
    toc: true
    toc_depth: 4
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# **Introduction**


The Bellabeat’s co-founder, Sršen, is aware that the analysis of Bellabeat’s available consumption data should reveal new growth opportunities for the company. She asked the marketing’s computational data analysis team to concentrate on one Bellabeat’s product and analyze the usage data of the smart devices in order to know how people actually use their smart devices. Then, with these insights, she would like to receive some high-level recommendations on how these tendencies could be utilized in Bellabeat's marketing strategies.


## *Stakeholders*
* Urška Sršen: Co-founder and Bellabeat’s Creative Director
* Sando Mur: Co-founder and Mathematician, key Bellabeat’s executive team member.

Sršen requested to analyze smart device usage data to determine how consumers are using their smart devices that are not Bellabeat's. Then, she wants a single Bellabeat’s product to be selected to apply the analysis insights to a presentation. 

## *Business Task* 
The main objective of this project is to know and study the habits of use of smart devices like Fitness Tracker Data of the company FitBit , different from those of Bellabeat, by users. This project will reveal the(s) trend(s) in these usage habits. Once these trends have been identified, make the findings known and develop a recommendation for the main stakeholders of this project (the co-founders of Bellabeat: Urška Sršen and Sando Mur), in relation to one of the different Bellabeat products that can take advantage of the area of opportunity that exists in the habits of use of users, so that in this way a marketing strategy can be formulated and implemented successfully.

# **Data Prepare**

Prior to the clean and preparation, a data validation was conducted.
The data source is the outreach/community platform for Data Analysts: "Kaggle". This is a data set generated by responses in a survey distributed via Amazon Mechanical Turk between 03.12.2016-05.12.2016; manipulation and public use under the corresponding permits and citations. Thirty eligible Fitbit users consented to the submission of personal tracking data, including minute-level results for physical activity, heart rate and sleep control. The variation between results represents the use of different types of Fitbit trackers and individual tracking behaviors/preferences.

For more detailed information about the data validation, please consult the ["Bellabeat_Prepare_MJGB"](https://docs.google.com/document/d/1AQujeIfU9bvYr88bJZirVxVO2nVcXG1gRrp13wEb5eg/edit?usp=sharing&resourcekey=0-tFB6Fu3uu99qBQjwWphvWg)  report.

## Setting up

To perform the data cleaning, we use the following packages:
```{r eval = FALSE}
library(tidyverse)
library(dplyr)
library(dbplyr)
library(knitr)
library(readr)
```

```{r actually install and load packages, include = FALSE}
library(tidyverse)
library(dplyr)
library(dbplyr)
library(knitr)
library(readr)
```

As dataset, we used the following .csv files from the original source:

* dailyActivity\_merged;
* heartrate_seconds_merged;
* minuteIntensitiesNarrow\_merged;
* minuteMETsNarrow\_merged;
* minuteSleep\_merged;
* sleepDay\_merged

*IMPORTANT: the current data has only 33 users activities from 4/12/2016 to 5/11/2016. This was not enough to represent the entire group of users whose ways of exercises may differ from season to season. Nevertheless, methods used in the analysis can be carried over straight to larger amount of data when available.* 

## Data Clean

### *Formatting dates*\

The dates provided in this dataset are too complex to be worked in a SLQ environment. So we used R to convert them into a format that is more suitable for the later analysis. 

**The heartrate_seconds_merged was modified before everything else in order to match the units of the other data sets, went from seconds to minutes; so the new data set is minutes_heartrate.

*Specifically we format the original date such as 4/12/2016 3:00:00 PM as 2016-04-12 15:00:00.*
```{r, message=FALSE, collapse=TRUE}
dailyActivity_merged <- read_csv("/kaggle/input/fitbit/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv") %>%
  mutate(ActivityDate = as.Date(ActivityDate, format = "%m/%d/%Y"))

minutes_heartrate <- read_csv("/kaggle/input/minutes-heartrate/minutes_heartrate.csv") %>%
  mutate(time = strftime(as.POSIXlt(time, format = "%m/%d/%Y %I:%M:%S %p")))

minuteIntensities_merged <- read_csv("/kaggle/input/fitbit/Fitabase Data 4.12.16-5.12.16/minuteIntensitiesNarrow_merged.csv") %>%
  mutate(ActivityMinute = strftime(as.POSIXlt(ActivityMinute, format = "%m/%d/%Y %I:%M:%S %p")))

minuteMETs_merged <- read_csv("/kaggle/input/fitbit/Fitabase Data 4.12.16-5.12.16/minuteMETsNarrow_merged.csv") %>%
  mutate(ActivityMinute = strftime(as.POSIXlt(ActivityMinute, format = "%m/%d/%Y %I:%M:%S %p")))

minuteSleep_merged <- read_csv("/kaggle/input/fitbit/Fitabase Data 4.12.16-5.12.16/minuteSleep_merged.csv") %>%
  mutate(date = strftime(as.POSIXlt(date, format = "%m/%d/%Y %I:%M:%S %p")))

sleepDay_merged <- read_csv("/kaggle/input/fitbit/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv") %>%
  mutate(SleepDay = strftime(as.POSIXlt(SleepDay, format = "%m/%d/%Y %I:%M:%S %p")))
```

We want to see a preview of each data set that we just formatted.
```{r, message=FALSE, warning=FALSE}
head(dailyActivity_merged)
head(minutes_heartrate)
head(minuteIntensities_merged)
head(minuteMETs_merged)
head(minuteSleep_merged)
head(sleepDay_merged)
```

### *Remove duplicates*\

We use the ***duplicated function*** to perform a check-up o for duplicates.
```{r collapse = TRUE}
nrow(dailyActivity_merged[duplicated(dailyActivity_merged),])
nrow(minutes_heartrate[duplicated(minutes_heartrate),])
nrow(minuteIntensities_merged[duplicated(minuteIntensities_merged),])
nrow(minuteMETs_merged[duplicated(minuteMETs_merged),])
nrow(minuteSleep_merged[duplicated(minuteSleep_merged),])
nrow(sleepDay_merged[duplicated(sleepDay_merged),])
```
There are 543 duplicated rows for the minuteSleep\_merged table and 3 duplicated rows for the sleepDay\_merged table, and no duplicated rows for the other tables. We now use the ***unique function*** to remove duplicates:
```{r}
minuteSleep_merged <- unique(minuteSleep_merged)
sleepDay_merged <- unique(sleepDay_merged)
```

### *Looking for incomplete data*\

On a first glance at total METs in the minuteMETs\_merged table, we saw that the base METs is 10. There are 1440 minutes in a day, so the total METs should always be at least 14400. Nevertheless, there are users whose total METs do not add up to 14400. This indicates that there are incomplete measurements in the dataset. The following query returns 31 instances where the records of a user's METS were not recorded throughout the day.
```{r, warning=FALSE, message=FALSE}
minuteMETs_merged %>%
  separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
  group_by(Id, date) %>%
  filter(n() < 1440) %>%
  summarise(mins_recorded = n())
```

The minuteIntensities\_merged has exactly the same incomplete instances. This was 
confirmed by 
```{r, warning=FALSE, message=FALSE}
all_equal(minuteMETs_merged %>%
            separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
            group_by(Id, date) %>%
            filter(n() < 1440) %>%
            summarise(mins_recorded = n()), minuteIntensities_merged %>%
            separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
            group_by(Id, date) %>%
            filter(n() < 1440) %>%
            summarise(mins_recorded = n()))
```

Since we are not predicting what the users do in the rest of the day, we will not include these data for daily aggregations later. The original dailyActivity\_merged table has 940 observations. Deleting 31 of them results in a less than 5 percent loss of the data.

## Aggregations\

We would like to have a summary of each user's daily total calories, Mets, and intensities in a single table. Although the original source already merged these measures on a daily basis, we pointed out earlier that some of the days contain incomplete data. We therefore aggregate these measures from scratch, using the minute measurement tables. We then merge these aggregations into the original dailyActivity\_merged table. The merged table will be named as the daily\_summary table. These are done with the more involved code:

```{r, message=FALSE}
daily_summary <- minuteIntensities_merged %>%
  separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
  group_by(Id, date) %>%
  filter(n() == 1440) %>% #Incomplete records are dropped
  summarise(TotalIntensity = sum(Intensity)) %>% #sum up each user's daily intensity
  merge(x = dailyActivity_merged[-c(3:14)], #include into dailyActivity_merged table, where-c(3:12) drops unused columns
    by.x = c("Id", "ActivityDate"),
    by.y = c("Id", "date")) %>%
  merge(y = minuteMETs_merged %>%
          separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
          group_by(Id, date) %>%
  summarise(TotalMETs = sum(METs)), #sum up each user's daily METs
    by.x = c("Id", "ActivityDate"),
    by.y = c("Id", "date"))
```

```{r}
head(daily_summary, n = 10)
```

We can now peek each user's usage by 
```{r}
daily_summary %>%
  group_by(Id) %>%
  summarise(days_of_use = n()) %>%
  arrange(days_of_use)
```

The distribution is quite uneven. Therefore tracking usage based on day activity records is not ideal. Fortunately the distribution is much more even among sleep device users. We count users' logIds to determine the number of uses. 
```{r}
usage <- minuteSleep_merged %>%
  group_by(Id) %>%
  summarise(num_of_use = n_distinct(logId)) %>%
  arrange(num_of_use)
```

```{r echo = FALSE, results = TRUE}
usage %>%
  print(n=24)
```

Note that we only have 24 users' (among 33) sleep records. According to the distribution, we can evenly divide the users into H (high), M (moderate), L (low), where users having 1-8 login records are counted as L. Those having 15-27 logins are counted as M. Finally, users with 28-39 login records are counted as H:
```{r}
usage <- usage %>%
  mutate(usage = case_when(
    num_of_use <= 9 ~ "L",
    num_of_use <= 27 & num_of_use >9 ~"M",
    num_of_use >= 27 ~"H"
  ))
```

```{r echo = FALSE, results = TRUE}
usage %>%
  print(n=24)
```

We are now ready for analysis.

# **Analysis**

## Plotting a few explorations

What's the relationship between steps taken in a day and sedentary minutes? How could this help inform the customer segments that we can market to? E.g. position this more as a way to get started in walking more? Or to measure steps that you're already taking?

```{r, echo=FALSE}
ggplot(data=dailyActivity_merged, aes(x=TotalSteps, y=SedentaryMinutes)) + geom_point()
```

What's the relationship between minutes asleep and time in bed? You might expect it to be almost completely linear - are there any unexpected trends?

```{r, echo=FALSE}
ggplot(data=sleepDay_merged, aes(x=TotalMinutesAsleep, y=TotalTimeInBed)) + geom_point()
```

What could these trends tell you about how to help market this product? Or areas where you might want to explore further?

## Merging these two datasets together

```{r}
combined_data <- merge(sleepDay_merged, dailyActivity_merged, by="Id")
```

Take a look at how many participants are in this data set.

```{r}
n_distinct(combined_data$Id)
```
Note that there were more participant Ids in the daily activity dataset that have been filtered out using merge. Consider using 'outer_join' to keep those in the dataset. 

We first present the general trend of the users in the data. We will see that the application has a  normally distributed user types. Moreover, the application helps users stay fit, and it handles intensities, METs, and calories consistently. We then investigate what affects usage. This is where we detected potential issues posed by the sleep data.

## General Trend 

We first plot and compare the distributions of users' average METs, intensities, and calories, using the daily\_summary table. The average values are aggregated by the following code:

```{r}
intesities_summary <- daily_summary %>%
  group_by(Id) %>%
  summarise(average_calories = mean(Calories),
            average_intensities = mean(TotalIntensity),
            average_METs = mean(TotalMETs))
```
            
```{r calorie_distribution}
calorie_distribution  <- intesities_summary  %>%
  select(Id, average_calories) %>%
    mutate(average_calories = case_when(
     average_calories <= 1500 ~ "<= 1500",
     average_calories <= 1800 & average_calories >1500 ~"1501 to 1800",
     average_calories <= 2100 & average_calories >1800 ~"1801 to 2100",
     average_calories <= 2400 & average_calories >2100 ~"2101 to 2400",
     average_calories <= 2700 & average_calories >2400 ~"2401 to 2700",
     average_calories <= 3000 & average_calories >2700 ~"2701 to 3000",
     average_calories <= 3300 & average_calories >3000 ~"3001 to 3300",
     average_calories > 3300 ~"X > 3300"
     )) %>%
  rename(range_calories = average_calories)

calorie_distribution  <- calorie_distribution  %>%
  group_by(range_calories)  %>%
  summarise(
    amount_Id = n(),
    percentage = amount_Id / 33 * 100)
```

```{r calorie_distribution plot, echo=FALSE}
ggplot(calorie_distribution, aes(x = range_calories, y=amount_Id, fill=amount_Id) ) + 
  geom_bar(width = 0.9, stat="identity", position = position_dodge()) + 
  ylim(c(0,10))+
  labs(x="Average Calories Range", y= "Amount of IDs in Range") +
  labs(fill = "") +
  geom_text(aes(label=paste0(amount_Id," ", "", "(", round(percentage, 2), "%",")")),
            vjust=-0.9, 
            color="black", 
            hjust=0.5,
            position = position_dodge(0.9),  
            angle=0, 
            size=4.0
            ) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  #theme_bw(base_size = 14) +
  facet_wrap(~"Calorie Distribution")  
```

```{r intensity_distribution}
intensity_distribution  <- intesities_summary  %>%
  select(Id, average_intensities) %>%
    mutate(average_intensities = case_when(
     average_intensities <= 100 ~ "<= 100",
     average_intensities <= 200 & average_intensities >100 ~"101 to 200",
     average_intensities <= 300 & average_intensities >200 ~"201 to 300",
     average_intensities <= 400 & average_intensities >300 ~"301 to 400",
     average_intensities > 400 ~"X > 400"
     )) %>%
  rename(range_intensities = average_intensities)

intensity_distribution  <- intensity_distribution  %>%
  group_by(range_intensities)  %>%
  summarise(
    amount_Id = n(),
    percentage = amount_Id / 33 * 100)
```

```{r intensity_distribution plot, echo=FALSE}
ggplot(intensity_distribution, aes(x = range_intensities, y=amount_Id, fill=amount_Id) ) + 
  geom_bar(width = 0.9, stat="identity", position = position_dodge()) + 
  ylim(c(0,15))+
  labs(x="Average Intensities Range", y= "Amount of IDs in Range") +
  labs(fill = "") +
  geom_text(aes(label=paste0(amount_Id," ", "", "(", round(percentage, 2), "%",")")),
            vjust=-0.9, 
            color="black", 
            hjust=0.5,
            position = position_dodge(0.9),  
            angle=0, 
            size=4.0
            ) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  #theme_bw(base_size = 14) +
  facet_wrap(~"Intensity Distribution")
```

```{r METs_distribution}
METs_distribution  <- intesities_summary  %>%
  select(Id, average_METs) %>%
    mutate(average_METs = case_when(
     average_METs <= 18000 & average_METs >15000 ~"15,000 to 18,000",
     average_METs <= 21000 & average_METs >18000 ~"18,001 to 21,000",
     average_METs <= 24000 & average_METs >21000 ~"21,001 to 24,000",
     average_METs <= 27000 & average_METs >24000 ~"24,001 to 27,000",
     average_METs > 27000 ~"27,000 to 30,000"
     )) %>%
  rename(range_METs = average_METs)

METs_distribution  <- METs_distribution  %>%
  group_by(range_METs)  %>%
  summarise(
    amount_Id = n(),
    percentage = amount_Id / 33 * 100)
```

```{r METs_distribution plot, echo=FALSE}
ggplot(METs_distribution, aes(x = range_METs, y=amount_Id, fill=amount_Id) ) + 
  geom_bar(width = 0.9, stat="identity", position = position_dodge()) + 
  ylim(c(0,15))+
  labs(x="Average METs Range", y= "Amount of IDs in Range") +
  labs(fill = "") +
  geom_text(aes(label=paste0(amount_Id," ", "", "(", round(percentage, 2), "%",")")),
            vjust=-0.9, 
            color="black", 
            hjust=0.5,
            position = position_dodge(0.9),  
            angle=0, 
            size=4.0
            ) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
  #theme_bw(base_size = 14) +
  facet_wrap(~"METs Distribution")
```

We see that the distributions are close to normal: they are mostly peaked in the middle and start to descend as we move away from the middle. This indicate that the application has a broad range of users. Next, we plot the trends over the recorded days by aggregating the daily\_summary table.

## Calories, Intensities and METs Trends

```{r, message=FALSE, warning=FALSE}
trends_daily_summary <- daily_summary %>%
  group_by(ActivityDate) %>%
  summarise(average_calories = mean(Calories),
            average_intensities = mean(TotalIntensity),
            average_METs = mean(TotalMETs))
```
```{r plot average_calories_trend, message=FALSE, warning=FALSE, echo=FALSE}
ggplot(trends_daily_summary, aes(x=ActivityDate, y=average_calories)) +
  geom_line() +
  geom_point() +
  geom_smooth(method=lm) +
  labs(x="Activity Date", y= "Calories") +
  facet_wrap(~"Average Calories Trend")
```
```{r plot average_intensities_trend, message=FALSE, warning=FALSE, echo=FALSE}
ggplot(trends_daily_summary, aes(x=ActivityDate, y=average_intensities)) +
  geom_line() +
  geom_point() +
  geom_smooth(method=lm) +
  labs(x="Activity Date", y= "Intensity") +
  facet_wrap(~"Average Intensity Trend")
```
```{r plot average_METs_trend, message=FALSE, warning=FALSE, echo=FALSE}
ggplot(trends_daily_summary, aes(x=ActivityDate, y=average_METs)) +
  geom_line() +
  geom_point() +
  geom_smooth(method=lm) +
  labs(x="Activity Date", y= "METs") +
  facet_wrap(~"Average METs Trend")
```

We have two major observations here. First, the three trends are very similar. This indicates that the application has a consistent way of measuring and calculating these three parameters. For this reason, we will be focusing on intensities from now on. Second, the trend goes slightly up, meaning that the application does help users stay fit. 

## Average intensity throughout a day

Next, we calculate and plot average minute intensities throughout the day, aggregated by all users. Doing so allows us to see which time period users tend to exercise or stay sedentary. 

```{r plot minuteIntensities, echo=FALSE, fig.cap = "Average intensity throughout a day"}
minuteIntensities_merged %>%
  separate(ActivityMinute, c("date", "minute"), sep = " ") %>%
  group_by(minute) %>%
  summarise(average_intensity = mean(Intensity)) %>%
  ggplot(aes(x = as.POSIXct(minute, format = "%H:%M:%S"), y = average_intensity, group = 1)) +
  geom_line(colour = "blue") +
  scale_x_datetime(date_labels="%H:%M", date_breaks = "2 hour") +
  xlab("Hour") +
  ylab("Average Intensity") + 
  facet_wrap(~"Average intensity throughout a day")
```

We see that most people exercise after noon and the intensity peaked in the 17:00 - 20:00 window. This indicates that most users exercise after work. So far we have only looked at users' exercises pattern. It is time to explore the sleep data.

## Sleep Patterns

We use the minuteSleep\_merged table to aggregate and plot sleep start times:\

```{r aggregate and plot sleep start times, message=FALSE, warning=FALSE, echo=FALSE}
minuteSleep_merged %>%
  group_by(Id, logId) %>%
  summarise(login_time = min(date),
            logout_time = max(date)) %>%
  merge(y = usage, by.y = "Id") %>%
  mutate(login_time = 
           paste(
             format(
               as.POSIXct(
                 login_time, format = "%Y-%m-%d %H:%M:%S"), format = "%H"), ":00", sep = "")) %>%
  mutate(logout_time = 
           paste(
             format(as.POSIXct(logout_time, format = "%Y-%m-%d %H:%M:%S"), format = "%H"), ":00", sep = "")) %>%
  ggplot(aes(x = login_time, fill = factor(usage, levels = c("H","M","L")))) + 
  geom_bar() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(fill = "Usage") + 
  xlab("Login Time") +
  ylab("Login Count") +
  facet_wrap(~"Sleep Start Times")
```

We do the same for sleep end times:\

```{r aggregate and plot sleep end times, message=FALSE, warning=FALSE, echo=FALSE}
minuteSleep_merged %>%
  group_by(Id, logId) %>%
  summarise(login_time = min(date),
            logout_time = max(date)) %>%
  merge(y = usage, by.y = "Id") %>%
  mutate(login_time = 
           paste(
             format(as.POSIXct(login_time, format = "%Y-%m-%d %H:%M:%S"), format = "%H"), ":00", sep = "")) %>%
  mutate(logout_time = 
           paste(format(as.POSIXct(logout_time, format = "%Y-%m-%d %H:%M:%S"), format = "%H"), ":00", sep = "")) %>%
  ggplot(aes(x = logout_time, fill = factor(usage, levels = c("H","M","L")))) + 
  geom_bar() + 
  theme(axis.text.x = element_text(angle = 90)) + 
  labs(fill = "Usage") + 
  xlab("Logout Time") +
  ylab("Logout Count") +
  facet_wrap(~"Sleep End Times")
```

We see that most users wake up between 6 and 8 AM, and go to sleep around 10 to 11 PM. There are no major differences in sleep patterns among the H,M,L groups. So, what impacts usage frequency? 

## What affects usage?

First, it is natural to guess users in the habit of more intense exercises tend to use the device more. we now demonstrate that indeed there is a moderate positive correlation between usage and overall workout intensities:\

```{r usage and overall workout intensities, message=FALSE, warning=FALSE, echo=FALSE}
minuteIntensities_merged %>%
  separate(ActivityMinute, c("date","minute"), sep = " ") %>%
  group_by(Id) %>%
  summarise(average_intensity = 60*mean(Intensity)) %>%
  merge(y = usage, by.y = "Id") %>%
  ggplot(aes(x = num_of_use, y = average_intensity)) + 
  geom_point() + 
  geom_smooth(method = lm) + 
  xlab("Number of Uses") + 
  ylab("Average Hourly Intensity") + 
  facet_wrap(~"correlation Usage/Workout Intensities")
```

Next, we present a factor that influences user experience negatively.

## The discrepancy

Our discovery of the potential issues originated from the difficulty to interpret sleep values recorded in the dataset. Since there was no information about sleep values, we tried plotting the average minute sleep values throughout the day, aggregated by 24 users first:\

```{r minuteSleep, message=FALSE, warning=FALSE, echo=FALSE}
minuteSleep_merged %>% 
  separate(date, c("date", "minute"), sep = " ") %>%
  group_by(minute) %>%
  summarise(average_value = mean(value)) %>%
  ggplot(aes(x = as.POSIXct(minute, format = "%H:%M:%S"), y = average_value, group = 1)) + 
  geom_line(color = "blue") + 
  scale_x_datetime(date_labels = "%H:%M", date_breaks = "2 hour") + 
  theme(axis.text.x = element_text(angle = 90)) + 
  ylab("Average Slepp Value") + 
  xlab("Hour") + 
  facet_wrap(~"Average sleep value throughout a day")
```

We were puzzled that the graph looks pretty similar to the intensity graph "Average intensity throughout a day" shown earlier. It is natural to guess the higher the sleep value, the less deep the sleep is. Nevertheless, the fact that the graph stretches throughout the entire day led us to believe that there may be instances where exercise intensities and sleep values were recorded simultaneously. We found out this is indeed the case:
```{r merge minuteSleep_merged & minuteIntensities_merged, message=FALSE, warning=FALSE}
merge(x = minuteSleep_merged, y = minuteIntensities_merged, by.x = c("Id", "date"), by.y = c("Id","ActivityMinute")) %>% 
  filter(Intensity>0) %>%
  as_tibble()
```

The query returned 1612 recording where both sleep value and intensity are not zero. We shall refer to these instances as discrepancies. Let us plot the correlation between usage and discrepancy.

```{r discrepancy, message=FALSE, warning=FALSE}
minuteIntensities_merged %>%
  merge(y = minuteSleep_merged, by.x = c("Id","ActivityMinute"), by.y = c("Id", "date")) %>%
  filter(Intensity != 0) %>%
  group_by(Id) %>%
  summarise(disc = n()) %>% #aggregate each user's discrepancies
  merge(y = usage,by.y = "Id") %>%
  mutate(disc_per_usage = disc/num_of_use) %>%
  ggplot(aes(x = num_of_use, y = disc_per_usage)) + 
  geom_point() +
  geom_smooth(method = lm) +
  xlab("Number of Uses") +
  ylab("Discrepancies per Usage") + 
  facet_wrap(~"Impact of discrepancy on usage")
```

This indicates a negative impact of discrepancy on user experiences.

# **Recommended actions**

Overall the application successfully helped users maintain their fitness, and the different parameters such as calories, METs, and intensities were handled consistently. It was the sleep tracking function which we think needs some improvements. 

The issues are mainly two. First and foremost, intensity should be given its context. Specifically  intensities recorded during sleep should be distinguished from those recorded otherwise. There can still be a measure called total intensity that sums up to the two if preferable. Moreover, the application should also warn its users that the sleep tracking is on when they turn on the exercise tracking functions and vice versa. It is easy to foresee the frustration users have when they find the data report confusing or uninterpretable. 

Second, to better track the trends of users' sleep patterns, we think sleep tracking data should be generated similarly as intensities and METs data. METs and intensities are set at their base values when users are inactive. We found out that the sleep values were only recorded when the users log in. This could potentially skew the data when a user turns on the sleep device at an unusual time. For example, the following query: 
```{r}
minuteSleep_merged %>%
  filter(strftime(date, 
                  format = "%H:%m") <= '20:00' &
         strftime(date,
                  format = "%H:%m") >= '18:00') %>%
  distinct(Id)
```

returns only four users who turned their sleep tracking on during 18:00 - 20:00 time period. Since no other users turned their sleep tracking on during this period, when calculating average minute sleep values, we saw a spike during this time period in Figure "Average intensity throughout a day". 

On the other hand, the following query:
```{r}
minuteIntensities_merged %>%
  filter(Intensity > 2 &
         strftime(ActivityMinute, 
                  format = "%H:%m") >= '00:00' &
         strftime(ActivityMinute,
                  format = "%H:%m") <= '02:00') %>%
distinct(Id)
```

confirmed there were high intensities (>=3) recorded during 12:00 AM - 2:00 AM period. Nevertheless, these instances did not produce spikes in the 24-hour intensity plot "Average intensity throughout a day" as they were neutralized by other users inactiveness recorded during this period. 

Finally, we acknowledge that the idea to also record intensities while sleeping has its own merit. Doing so can detect potential health issues for the users. For example, the following queries: 

```{r eval = FALSE}
tmp <- minuteIntensities_merged %>%
  merge(y =
        minuteSleep_merged[-c(4)],
        by.x = c("Id", "ActivityMinute"),
        by.y = c("Id", "date")) %>%
  filter(Intensity > 2 &
         Id == "4020332650") %>%
  merge(y = minutes_heartrate,
        by.x = c("Id", "ActivityMinute"),
        by.y = c("Id", "time"))
```
```{r echo = FALSE}
tmp <- minuteIntensities_merged %>%
  merge(y =
        minuteSleep_merged[-c(4)],
        by.x = c("Id", "ActivityMinute"),
        by.y = c("Id", "date")) %>%
  filter(Intensity > 2 &
         Id == "4020332650") %>%
  merge(y = minutes_heartrate,
        by.x = c("Id", "ActivityMinute"),
        by.y = c("Id", "time"))
```
```{r}
colnames(tmp) <- c("Id", "ActivityMinute", "ActivityIntensity", "SleepValue", "HeartRate")
tmp
rm(tmp)
```

indicate that this very user has abnormally high heart rate during her sleep. We appreciate that the device can detect instances as these. The device will work even better if it handles intensities more carefully.

# **Final Thoughts**

The major findings in this study are the following: 

* First, the Bellabeat application has a broad range of users. This can be seen by the nearly normal distributions of user types presented in the General Trend Section. 
* Second, the trend plots for calories, METs and intensities over the recorded days all have positive trend lines. This shows that the application does help its users stay fit. 
* Third, the similarities between the trend plots showcase a strength of the application: it handles different measures such as calories, METs and intensities consistently. Another strength of the application is its massive heart rate data, which can be used to detect its users' potential health problems. Among these appreciations nevertheless, we spotted a potential flaw of the application, which is its sleep tracking function.

We find the values assigned to the sleep records confusing. There is no clear indication if higher values means better sleep. On top of that, there are quite a few instances where both activity intensities and sleep values are detected simultaneously, resulting in possibly incorrect records. We refer to those instances as discrepancies. We will show that discrepancies have negative impact on user experience with discrepancy. Finally, we proposed ways for improving the sleep tracking function.
